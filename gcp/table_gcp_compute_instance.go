package gcp

import (
	"context"

	"github.com/turbot/go-kit/types"

	"github.com/turbot/steampipe-plugin-sdk/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/plugin"
	"github.com/turbot/steampipe-plugin-sdk/plugin/transform"

	"google.golang.org/api/compute/v1"
)

func tableGcpComputeInstance(ctx context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "gcp_compute_instance",
		Description: "GCP Compute Instance",
		Get: &plugin.GetConfig{
			KeyColumns: plugin.SingleColumn("name"),
			Hydrate:    getComputeInstance,
		},
		List: &plugin.ListConfig{
			Hydrate: listComputeInstances,
		},
		Columns: []*plugin.Column{
			// commonly used columns
			{Name: "name", Type: proto.ColumnType_STRING, Description: "The name of the instance."},
			{Name: "machine_type_name", Type: proto.ColumnType_STRING, Transform: transform.FromField("MachineType").Transform(lastPathElement), Description: "Name of the machine type resource for this instance."},
			{Name: "status", Type: proto.ColumnType_STRING, Description: "The status of the instance (PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED)."},

			// other columns
			{Name: "can_ip_forward", Type: proto.ColumnType_BOOL, Description: "Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes."},
			{Name: "confidential_instance_config", Type: proto.ColumnType_JSON, Description: "Confidential VM detail for the instance, if applicable. Confidential VMs, now in beta, is the first product in Google Cloudâ€™s Confidential Computing portfolio."},
			{Name: "cpu_platform", Type: proto.ColumnType_STRING, Description: "The CPU platform used by this instance."},
			{Name: "creation_timestamp", Type: proto.ColumnType_TIMESTAMP, Description: "Timestamp the instance was created."},
			{Name: "deletion_protection", Type: proto.ColumnType_BOOL, Description: "Whether the resource should be protected against deletion."},
			{Name: "description", Type: proto.ColumnType_STRING, Description: "The instance description."},
			{Name: "disks", Type: proto.ColumnType_JSON, Description: "An Array of disks associated with this instance"},
			{Name: "display_device", Type: proto.ColumnType_JSON, Description: "Display device for the instance."},
			{Name: "fingerprint", Type: proto.ColumnType_STRING, Description: "Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance."},
			{Name: "guest_accelerators", Type: proto.ColumnType_JSON, Description: "A list of the type and count of accelerator cardsattached to the instance."},
			{Name: "hostname", Type: proto.ColumnType_STRING, Description: "The instance hostname."},
			{Name: "id", Type: proto.ColumnType_INT, Description: "The instance id."},
			{Name: "kind", Type: proto.ColumnType_STRING, Description: "Type of the resource. Always compute#instance for instances."},
			{Name: "label_fingerprint", Type: proto.ColumnType_STRING, Description: "A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels."},
			{Name: "labels", Type: proto.ColumnType_JSON, Description: "Labels that apply to this instance."},
			{Name: "last_start_timestamp", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromGo().NullIfZero(), Description: "Timestamp when the instance was last started."},
			{Name: "last_stop_timestamp", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromGo().NullIfZero(), Description: "Timestamp when the instance was last stopped."},
			{Name: "last_suspended_timestamp", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromGo().NullIfZero(), Description: "Timestamp when the instance was last suspended."},
			{Name: "machine_type", Type: proto.ColumnType_STRING, Description: "Full or partial URL of the machine type resource for this instance, in the format: zones/zone/machineTypes/machine-type."},
			{Name: "metadata", Type: proto.ColumnType_JSON, Description: "The metadata key/value pairs assigned to this instance."},
			{Name: "min_cpu_platform", Type: proto.ColumnType_STRING, Description: "Specifies a minimum CPU platform for the VM instance."},
			{Name: "network_interfaces", Type: proto.ColumnType_JSON, Description: "An array of network configurations for this instance."},
			{Name: "private_ipv6_google_access", Type: proto.ColumnType_STRING, Description: "The private IPv6 google access type for the instance."},
			{Name: "reservation_affinity", Type: proto.ColumnType_JSON, Description: " Specifies the reservations that this instance can consume from."},
			{Name: "resource_policies", Type: proto.ColumnType_JSON, Description: "Resource policies applied to this instance."},
			{Name: "scheduling", Type: proto.ColumnType_JSON, Description: "The scheduling options for this instance."},
			{Name: "self_link", Type: proto.ColumnType_STRING, Description: "Server-defined URL for this resource."},
			{Name: "service_accounts", Type: proto.ColumnType_JSON, Description: "A list of service accounts, with their specified scopes, authorized for this instance."},
			{Name: "shielded_instance_config", Type: proto.ColumnType_JSON, Description: "Shielded instance configuration.  Shielded VM provides verifiable integrity to prevent against malware and rootkits."},
			{Name: "shielded_instance_integrity_policy", Type: proto.ColumnType_JSON, Description: "Shielded instance integrity policy. Shielded instance configuration.  Shielded VM provides verifiable integrity to prevent against malware and rootkits."},
			{Name: "start_restricted", Type: proto.ColumnType_BOOL, Description: "Whether a VM has been restricted for start because Compute Engine has detected suspicious activity."},
			{Name: "status_message", Type: proto.ColumnType_STRING, Description: "An optional, human-readable explanation of the status."},
			{Name: "network_tags", Type: proto.ColumnType_STRING, Transform: transform.FromField("Tags"), Description: "Network tags applied to this instance. Network tags are used to identify valid sources or targets for network firewalls."},
			{Name: "zone", Type: proto.ColumnType_STRING, Description: "The zone in which the instance resides."},
			// zone_name is a simpler view of the zone, without the full path
			{Name: "zone_name", Type: proto.ColumnType_STRING, Transform: transform.FromField("Zone").Transform(lastPathElement), Description: "The zone name in which the instance resides."},

			// standard steampipe columns
			{Name: "title", Type: proto.ColumnType_STRING, Transform: transform.FromField("Name"), Description: ColumnDescriptionTitle},
			{Name: "tags", Type: proto.ColumnType_JSON, Transform: transform.FromField("Labels"), Description: ColumnDescriptionTags},
			{Name: "akas", Type: proto.ColumnType_JSON, Transform: transform.From(instanceAka), Description: ColumnDescriptionAkas},

			// standard gcp columns
			{Name: "project", Type: proto.ColumnType_STRING, Transform: transform.FromConstant(activeProject()), Description: ColumnDescriptionProject},
			{Name: "location", Type: proto.ColumnType_STRING, Transform: transform.FromField("Zone").Transform(lastPathElement), Description: ColumnDescriptionLocation},
		},
	}
}

//// HYDRATE FUNCTIONS

func listComputeInstances(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	logger := plugin.Logger(ctx)
	logger.Trace("listComputeInstances")

	service, err := compute.NewService(ctx)
	if err != nil {
		return nil, err
	}

	project := activeProject()
	resp := service.Instances.AggregatedList(project)
	if err := resp.Pages(
		ctx,
		func(page *compute.InstanceAggregatedList) error {
			for _, item := range page.Items {
				for _, instance := range item.Instances {
					d.StreamListItem(ctx, instance)
				}
			}
			return nil
		},
	); err != nil {
		return nil, err
	}

	return nil, nil
}

func getComputeInstance(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	logger := plugin.Logger(ctx)
	logger.Trace("getComputeInstance")

	service, err := compute.NewService(ctx)
	if err != nil {
		return nil, err
	}

	var instance compute.Instance
	project := activeProject()
	name := d.KeyColumnQuals["name"].GetStringValue()

	resp := service.Instances.AggregatedList(project).Filter("name=" + name)
	if err := resp.Pages(
		ctx,
		func(page *compute.InstanceAggregatedList) error {
			for _, item := range page.Items {
				for _, i := range item.Instances {
					instance = *i
				}
			}
			return nil
		},
	); err != nil {
		return nil, err
	}

	return instance, nil
}

//// TRANSFORM FUNCTIONS

func instanceAka(_ context.Context, d *transform.TransformData) (interface{}, error) {
	i := d.HydrateItem.(*compute.Instance)

	zoneName := getLastPathElement(types.SafeString(i.Zone))
	instanceName := types.SafeString(i.Name)

	// ex: gcp://compute.googleapis.com/projects/project-aaa/zones/us-central1-a/instances/instance-1
	akas := []string{"gcp://compute.googleapis.com/projects/" + activeProject() + "/zones/" + zoneName + "/instances/" + instanceName}

	return akas, nil

}
