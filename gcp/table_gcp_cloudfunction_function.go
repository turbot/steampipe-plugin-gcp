package gcp

import (
	"context"
	"fmt"
	"strings"

	"github.com/turbot/go-kit/types"
	"github.com/turbot/steampipe-plugin-sdk/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/plugin"
	"github.com/turbot/steampipe-plugin-sdk/plugin/transform"

	"google.golang.org/api/cloudfunctions/v1"
)

func tableGcpCloudfunctionFunction(ctx context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "gcp_cloudfunction_function",
		Description: "GCP Cloud Function",
		Get: &plugin.GetConfig{
			KeyColumns: plugin.SingleColumn("name"),
			Hydrate:    getCloudFunction,
		},
		List: &plugin.ListConfig{
			Hydrate: listCloudFunctions,
		},
		Columns: []*plugin.Column{
			{Name: "name", Type: proto.ColumnType_STRING, Description: "The name of the function."},
			{Name: "available_memory_mb", Type: proto.ColumnType_INT, Description: "The amount of memory in MB available for the function."},
			{Name: "build_environment_variables", Type: proto.ColumnType_JSON, Description: "Environment variables that shall be available during build time"},
			{Name: "build_id", Type: proto.ColumnType_STRING, Description: "The Cloud Build ID of the latest successful deployment of the function."},
			{Name: "description", Type: proto.ColumnType_STRING, Description: "User-provided description of a function."},
			{Name: "entry_point", Type: proto.ColumnType_STRING, Description: "The name of the function (as defined in source code) that will be executed."},
			{Name: "environment_variables", Type: proto.ColumnType_JSON, Description: "Environment variables that shall be available during function execution."},
			{Name: "event_trigger", Type: proto.ColumnType_JSON, Description: "A source that fires events in response to a condition in another service."},
			{Name: "https_trigger", Type: proto.ColumnType_JSON, Description: "An HTTPS endpoint type of source that can be triggered via URL."},

			{Name: "iam_policy", Type: proto.ColumnType_JSON, Description: "The IAM policy for the function.", Transform: transform.FromValue(), Hydrate: getGcpCloudFunctionIamPolicy},

			{Name: "ingress_settings", Type: proto.ColumnType_STRING, Description: "The ingress settings for the function, controlling what traffic can reach it (INGRESS_SETTINGS_UNSPECIFIED, ALLOW_ALL, ALLOW_INTERNAL_ONLY, ALLOW_INTERNAL_AND_GCLB)."},
			{Name: "labels", Type: proto.ColumnType_JSON, Description: "Labels that apply to this function."},
			{Name: "max_instances", Type: proto.ColumnType_INT, Description: "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit."},
			{Name: "network", Type: proto.ColumnType_STRING, Description: "The VPC Network that this cloud function can connect to."},
			{Name: "runtime", Type: proto.ColumnType_STRING, Description: "The runtime in which to run the function."},

			{Name: "service_account_email", Type: proto.ColumnType_STRING, Description: "The email of the function's service account."},
			{Name: "source_archive_url", Type: proto.ColumnType_STRING, Description: "The Google Cloud Storage URL, starting with gs://, pointing to the zip archive which contains the function."},
			{Name: "source_repository", Type: proto.ColumnType_STRING, Description: "**Beta Feature** The source repository where a function is hosted."},
			{Name: "source_upload_url", Type: proto.ColumnType_STRING, Description: "The Google Cloud Storage signed URL used for source uploading, generated by google.cloud.functions.v1.GenerateUploadUrl"},
			{Name: "status", Type: proto.ColumnType_STRING, Description: "Status of the function deployment (ACTIVE, OFFLINE, CLOUD_FUNCTION_STATUS_UNSPECIFIED,DEPLOY_IN_PROGRESS, DELETE_IN_PROGRESS, UNKNOWN)."},
			{Name: "timeout", Type: proto.ColumnType_STRING, Description: "The function execution timeout. Execution is consideredfailed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds."},
			{Name: "update_time", Type: proto.ColumnType_TIMESTAMP, Description: "The last update timestamp of the Cloud Function."},
			{Name: "version_id", Type: proto.ColumnType_INT, Description: "The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created."},
			{Name: "vpc_connector", Type: proto.ColumnType_STRING, Description: "The VPC Network Connector that this cloud function can  connect to. This field is mutually exclusive with `network` field and will eventually replace it."},
			{Name: "vpc_connector_egress_settings", Type: proto.ColumnType_STRING, Description: "The egress settings for the connector, controlling what traffic is diverted through it (VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED, PRIVATE_RANGES_ONLY, ALL_TRAFFIC)."},

			// standard steampipe columns
			{Name: "title", Type: proto.ColumnType_STRING, Transform: transform.FromField("Name"), Description: resourceInterfaceDescription("title")},
			{Name: "tags", Type: proto.ColumnType_JSON, Transform: transform.FromField("Labels"), Description: resourceInterfaceDescription("tags")},
			{Name: "akas", Type: proto.ColumnType_JSON, Transform: transform.From(functionAka), Description: resourceInterfaceDescription("akas")},

			// standard gcp columns
			{Name: "project", Type: proto.ColumnType_STRING, Transform: transform.FromConstant(activeProject()), Description: resourceInterfaceDescription("project")},
			{Name: "location", Type: proto.ColumnType_STRING, Transform: transform.FromField("Name").Transform(locationFromFunctionName), Description: resourceInterfaceDescription("location")},
			{Name: "location_type", Type: proto.ColumnType_STRING, Transform: transform.FromConstant("region"), Description: resourceInterfaceDescription("location_type")},
		},
	}
}

//// HYDRATE FUNCTIONS

func listCloudFunctions(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	logger := plugin.Logger(ctx)
	logger.Trace("listCloudFunctions")

	service, err := cloudfunctions.NewService(ctx)
	if err != nil {
		return nil, err
	}

	project := activeProject()
	data := "projects/" + project + "/locations/-" // '-' for all locations...

	resp := service.Projects.Locations.Functions.List(data)
	if err := resp.Pages(
		ctx,
		func(page *cloudfunctions.ListFunctionsResponse) error {
			for _, item := range page.Functions {
				d.StreamListItem(ctx, item)
			}
			return nil
		},
	); err != nil {
		return nil, err
	}

	return nil, nil
}

func getCloudFunction(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	logger := plugin.Logger(ctx)
	logger.Trace("GetCloudFunction")

	service, err := cloudfunctions.NewService(ctx)
	if err != nil {
		return nil, err
	}

	name := d.KeyColumnQuals["name"].GetStringValue()

	cloudFunction, err := service.Projects.Locations.Functions.Get(name).Do()
	if err != nil {
		return nil, err
	}
	return cloudFunction, nil
}

func getGcpCloudFunctionIamPolicy(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	logger := plugin.Logger(ctx)
	logger.Trace("getGcpCloudFunctionIamPolicy")

	service, err := cloudfunctions.NewService(ctx)
	if err != nil {
		return nil, err
	}

	function := h.Item.(*cloudfunctions.CloudFunction)

	resp, err := service.Projects.Locations.Functions.GetIamPolicy(function.Name).Do()
	if err != nil {
		return nil, err
	}

	if resp != nil {
		return resp, nil
	}

	return cloudfunctions.Policy{}, nil
}

//// TRANSFORM FUNCTIONS

// TODO: Is this the standard gcp AKA Format??
func functionAka(_ context.Context, d *transform.TransformData) (interface{}, error) {
	i := d.HydrateItem.(*cloudfunctions.CloudFunction)

	functionNamePath := types.SafeString(i.Name)

	//ex: gcp://cloudfunctions.googleapis.com/projects/morales-aaa/locations/us-central1/functions/hello-whirled
	akas := []string{"gcp://cloudfunctions.googleapis.com/" + functionNamePath}

	return akas, nil

}

func locationFromFunctionName(_ context.Context, d *transform.TransformData) (interface{}, error) {
	functionName := types.SafeString(d.Value)
	parts := strings.Split(functionName, "/")
	if len(parts) != 6 {
		return nil, fmt.Errorf("Transform locationFromFunctionName failed - unexpected name format: %s", functionName)
	}
	return parts[3], nil
}
